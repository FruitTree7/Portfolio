{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7747682,"sourceType":"datasetVersion","datasetId":4529219}],"dockerImageVersionId":30664,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/fruittree3/ai100?scriptVersionId=175979638\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# AI100 - Python Programming and Data Visualisation Capstone Project\n\n**Learning Outcomes:**\n\nAI100 is designed to equip beginners to programming with\n\n- a strong foundation in python programming,\n\n- an intuition on how to harness actionable insights from real-world data, and\n\n- the ability to build beautiful tabular, graphical and geospatial visualisations with their Python development skills.","metadata":{}},{"cell_type":"markdown","source":"# HDB Resale Data Analytics\n\nGetting a HDB is probably one of the biggest financial decisions many Singaporeans have to make, given its exhorbitant cost. Making a wrong decision could set you back several years in terms of opportunity cost & time value of money.\n\nIn this project, we seek to build data visualisation to shed light on the HDB resale market, and provide key consideration parameters to help us make better decisions in choosing a:\n\n(1) HDB Resale flat, or <br>\n(2) BTO flats that are likely to appreciate in the resale market","metadata":{}},{"cell_type":"code","source":"hdb_resale_listings = []\n\nimport csv\n\nwith open('/kaggle/input/hdb-resale-with-geocoordinates/HDB_Resale_With_Geocoordinates.csv', newline='', encoding=\"utf8\") as f:\n    reader = csv.reader(f)\n    for row in reader:\n        hdb_resale_listings.append(row)\n\n    # Remove header\n    hdb_resale_listings_headers = hdb_resale_listings[0]\n    hdb_resale_listings = hdb_resale_listings[1:]\n    \nprint(hdb_resale_listings[0])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"hdb_resale_df = pd.read_csv(\"/kaggle/input/hdb-resale-with-geocoordinates/HDB_Resale_With_Geocoordinates.csv\")\nhdb_resale_df","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Cleaning\n\nThe data columns will be cleaned are:\n\n* floor_area_sqm (convert to float)\n* remaining_lease (extract only the years & convert it to float)\n* resale_price (convert to float)\n* longitude (convert to float)\n* latitude (convert to float)","metadata":{}},{"cell_type":"code","source":"for row in hdb_resale_listings:\n    \n    floor_area_sqm = row[6]\n    lease_remaining = row[9]                 \n    resale_price = row[10]\n    longitude = row[12]\n    latitude = row[13]\n    \n    row[6] = float(floor_area_sqm)\n    \n    # If lease_remaining info is of string data type\n    if isinstance(lease_remaining,str):\n        row[9] = int(lease_remaining[:2]) # Get years of lease remaining with slicing, and convert it to int type\n   \n    row[10] = float(resale_price)\n    \n    if longitude == '':\n        row[12] = 0\n    else:\n        row[12] = float(longitude)\n        \n    if latitude == '':\n        row[13] = 0\n    else:\n        row[13] = float(latitude)\n\nprint(hdb_resale_listings[:5]) # Print first 5 rows of data","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Saving cleaned data back into DataFrame","metadata":{}},{"cell_type":"code","source":"hdb_resale_df = pd.DataFrame(hdb_resale_listings, columns = hdb_resale_listings_headers)\nhdb_resale_df.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Question 1: Calculate the Number of Resale Flats in Each Town\n\n<b>Background:<b>\n\n- The team at HDB has tasked you to answer some analytical queries using the data stored in <code>hdb_resale_listings</code>.\n- Let's start by first getting an broad idea of the number of resale flat listings in each planning area or town.\n\n<b>User story:</b>\n\n- Tabulate the number of resale listings in each town, and return the counts in descending order.\n<br>","metadata":{}},{"cell_type":"code","source":"resale_counts_by_town = {}  # Populate this dictionary with counts\n\n# Using For loop to count the number of transactions in a town\n\nfor row in hdb_resale_listings:\n    town = row[1]\n    \n    if town in resale_counts_by_town:\n        resale_counts_by_town[town] += 1\n        \n    else:\n        resale_counts_by_town[town] = 1\n\n# Sort the counts in descending order\n\nresale_counts_sorted_desc = dict(sorted(resale_counts_by_town.items(), key=lambda x : x[1], reverse=True)) \n\n# Return the counts in descending order\n\nfor town, count in resale_counts_sorted_desc.items(): \n    print(f\"{town}: {count}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Question 2: Visualise the Number of Resale Flats in Each Town\n\n<b>Background:</b>\n\n- You've been tasked by HDB to visualise the number of resale flats in each town.\n- While the dictionary you've prepared in Q1 is well and good, it would paint a clearer picture to visualise this data with a chart.\n\n<b>User story:</b>\n\n- Using the `resale_counts_sorted_desc` dictionary provided below, create a bar chart that shows the number of resale listings in each town.\n- Your x tick labels should also be rotated by 90 degrees for readability. Remember to configure the x-axis label, y-axis label and title as well!\n<br>","metadata":{}},{"cell_type":"code","source":"# Import matplotlib library here\n\nimport matplotlib.pyplot as plt\n\n## Write your code below\n\nfig, ax = plt.subplots()\nax.bar(resale_counts_sorted_desc.keys(),resale_counts_sorted_desc.values())\n\nax.set_xticklabels(resale_counts_sorted_desc.keys(), rotation=90)\nax.set_xlabel('Town')\nax.set_ylabel('Number of Resale Flats')\nax.set_title('Counts of Resale Flats from Jan 2017 to June 2020')\n\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Observations\n\nWe observe that developing estates such as Sengkang, Punggol, and Woodlands tend to have a much higher volume of resale flats compared to mature estates such as Bishan and Marine Parade, which do not have as much land parcels available for development.\n\nThese difference in resale volume could be due to:\n\n- Young couples upgrading from their initial BTOs in nearby areas (more prevalent in areas such as Sengkang, Punggol, Woodlands)\n- Potential for housing appreciation in developing estates like Sengkang and Punggol due to new amenities being developed","metadata":{}},{"cell_type":"markdown","source":"# Question 3: Calculate the Total Sale Value in Each Town\n\n<b>Background:<b>\n\n- You have been tasked to compile the total sale value of all HDB resale flats in each town.\n\n<b>User story:<b>\n\n- Using a method similar to Q1's, tabulate the total sale value of HDB listings in each town","metadata":{}},{"cell_type":"code","source":"town_resale_value_total = {} # Populate this dictionary with your Q3 output\n\n## Write your code below\n\nfor row in hdb_resale_listings:\n    town = row[1]\n    sales_price = row[10]\n    \n    if town in town_resale_value_total:\n        town_resale_value_total[town] += sales_price\n        \n    else:\n        town_resale_value_total[town] = sales_price\n        \nfor town, count in town_resale_value_total.items(): \n    formatted_count = \"${:,}\".format(count)\n    print(f\"{town}: {formatted_count}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Question 4: Calculate the Average Resale Value in Each Town\n\n**Background:**\n\n* You have been tasked to calculate the average resale value of HDB resale flats for each town.\n\n**User story:**\n\n* Using <code>*town_num_resale*</code> and <code>*town_resale_value_total*</code> from Q1 and Q3, tabulate the average HDB resale values for each town.\n    * <code>*town_resale_value_total*</code>: stores the total sale value of all HDB resale flats, tabulated for each town\n    * <code>*town_num_resale*</code>: stores the number of HDB resale flats, tabulated for each town\n* Output your result in descending order of average resale values (rounded to the nearest integer).","metadata":{}},{"cell_type":"code","source":"# Store Q1 resale_counts_by_town by town in alphabetical order\n\ntown_num_resale = dict(sorted(resale_counts_by_town.items(), key=lambda x : x[0]))\n                       \n# Populate this dictionary with Q4 answers\n    \ntown_resale_average = {} \n\n## Write your code below\n\nfor row in town_resale_value_total:\n    town_resale_average[row] = round(town_resale_value_total[row] / town_num_resale[row])\n\ntowns_resale_average_desc = dict(sorted(town_resale_average.items(), key=lambda x : x[1], reverse=True))\n\nfor town, count in towns_resale_average_desc.items():\n    formatted_count = \"${:,}\".format(count)\n    print(f\"{town}: {formatted_count}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Question 5: Visualise the Average Resale Value in Each Town\n\n**Background:**\n\n- You have been tasked to use the data compiled in Q4 to visualise the average resale value of HDB flats in each town.\n\n**User story:\n\n- Plot a bar chart showing the average resale value in each town.\n- Your x tick labels should also be rotated by 90 degrees for readability. Remember to configure the x-axis label, y-axis label and title as well!","metadata":{}},{"cell_type":"code","source":"fig, ax = plt.subplots()\nax.bar(town_resale_average.keys(), town_resale_average.values())\n\nax.set_xticklabels(town_resale_average.keys(), rotation=90)\nax.set_xlabel('Town')\nax.set_ylabel('Average Resale Value')\nax.set_title('Average Resale Value in Each Town')\n\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Observations\n\nUnsurprisingly, **HDB flats in central areas like Bukit Timah and Bishan have some of the highest resale values**. The convenience of living in these areas also contribute to the huge demand of BTO flats there; getting a BTO in these areas is almost like striking the lottery!\n\nOne interesting observation is the surprisingly high resale value of Punggol flats relative to other towns. While some may have the impression that Punggol flats are inaccessible and not desirable, the average resale value tells a different story. Observe that Punggol's resale value is markedly higher than areas like Ang Mo Kio and Bedok. In addition, the average resale value of Punggol flats is not that far off from matured estates like Clementi, Tampines & Serangoon.\n\nA potential follow-up visualisation would be a time-series analysis of the Punggol HDB resale values over the years, and one might discover significant capital appreciation opportunities for Punggol BTO owners in the resale market!","metadata":{}},{"cell_type":"markdown","source":"# Question 6: Is the Lease an Important Factor in the HDB Resale Price\n\n**Background:**\n\n- Some claim that HDB is an appreciating asset, yet, you often wonder how this can be true when the remaining lease period of HDB flats shortens over the years.\n- You want to visualise the relationship between HDB resale prices and remaining lease periods using a line plot, to assess if lease remaining could serve as an important consideration factor when buying a HDB for investment.\n\n**User story:**\n\n- Plot a line chart of the average resale price for each lease year remaining.\n- Make sure to use diamond-shaped markers, and remember to set the x-axis label, y-axis label and title for your plot.","metadata":{}},{"cell_type":"code","source":"average_resale_for_lease_year_remaining = {}\nresale_prices_by_lease_year = {}\nresale_counts_by_lease_year = {}\n\n# Calculate the sum and count of resale prices for each remaining lease year\nfor row in hdb_resale_listings:\n    remaining_lease = row[9]\n    resale_price = row[10]\n    \n    if remaining_lease in resale_prices_by_lease_year:\n        resale_prices_by_lease_year[remaining_lease] += resale_price\n        resale_counts_by_lease_year[remaining_lease] += 1\n    else:\n        resale_prices_by_lease_year[remaining_lease] = resale_price\n        resale_counts_by_lease_year[remaining_lease] = 1\n\n# Calculate the average resale price for each remaining lease year\n\nfor remaining_lease, total_price in resale_prices_by_lease_year.items():\n    count = resale_counts_by_lease_year[remaining_lease]\n    average_resale_for_lease_year_remaining[remaining_lease] = round(total_price / count)\n\naverage_resale_for_lease_year_remaining_sorted = dict(sorted(average_resale_for_lease_year_remaining.items(), key=lambda x : x[0]))\n\n# Extract lease and average resale price separately\n\nlease = list(average_resale_for_lease_year_remaining_sorted.keys())\naverage_resale_value = list(average_resale_for_lease_year_remaining_sorted.values())\n\n# Line chart\n\nfig, ax = plt.subplots()\nax.plot(lease, average_resale_value, marker = 'D')\n\nax.set_xlabel('Lease Remaining')\nax.set_ylabel('Resale Value')\nax.set_title('Average Resale Value for Lease Years Remaining')\n\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Question 7: How does Floor Area Correlate with Resale Price?\n\n**Background:**\n\n- You have been tasked to examine and visualise the relationship between floor area and HDB resale prices.\n\n**User story:**\n\n- Make use of iterations to extract <code>floor_area_sqm</code> & <code>resale_price columns</code> from the dataset, and use the extracted lists to chart a scatterplot of floor area (x-axis) versus resale prices (y-axis).\n- Set the figure size of the plot to figsize=(18,12)\n- Remember to set the x-axis label, y-axis label and title of your plot!","metadata":{}},{"cell_type":"code","source":"hdb_resale_df.head(3)   # Using pandas to help you visualise columns in the dataset","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"floor_area_sqm = [row[6] for row in hdb_resale_listings]\nresale_price = [row[10] for row in hdb_resale_listings]\n\n#Scatterrplot\n\nfig, ax = plt.subplots(figsize=(18, 12))\nax.scatter(floor_area_sqm, resale_price)\n\nax.set_xlabel('Floor Area (in square metres)')\nax.set_ylabel('Sale Price (in Million SGD)')\nax.set_title('Relationship between Floor Area & Resale Price')\n\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Observations\n\nThe scatterplot above shows that floor area is closely and positively correlated with HDB resale prices, with some variance that can likely be attributed to their locations (as investigated above). If you're looking for a large HDB flat, be prepared to pay!","metadata":{}},{"cell_type":"markdown","source":"# Question 8: Comparing Select 4 Room Flats in Singapore\n\n**Background:**\n\n- You're interested in buying a 4-room flat and have shortlisted a few housing estates of interest: Punggol, Tampines, Woodlands, Clementi and Yishun. As such, you wish to investigate the price distribution of 4-room HDB resale flats in these select towns.\n\n**User story:**\n\n- Create a boxplot that illustrates the 4-room resale price distribution in these stowns: Punggol, Tampines, Woodlands, Clementi and Yishun. Remember to configure the x tick labels, y-axis label and title!","metadata":{}},{"cell_type":"code","source":"# Extracts 4-room resale flat prices in 5 towns: Punggol, Tampines, Woodlands, Clementi and Yishun\n\npunggol = []\ntampines = []\nwoodlands = []\nclementi = []\nyishun = []\n\nfor row in hdb_resale_listings:\n    \n    if row[2] == '4 ROOM':\n        \n        town = row[1]\n        \n        if town == 'PUNGGOL':\n            punggol.append(row[10])\n            \n        elif town == 'TAMPINES':\n            tampines.append(row[10])\n            \n        elif town == 'WOODLANDS':\n            woodlands.append(row[10])\n            \n        elif town == 'CLEMENTI':\n            clementi.append(row[10])\n            \n        elif town == 'YISHUN':\n            yishun.append(row[10])\n            \n# Boxplot\n\nflat_price = [punggol, tampines, woodlands, clementi, yishun]\ntown = ['Punggol', 'Tampines', 'Woodlands', 'Clementi', 'Yishun']\n\nfig, ax = plt.subplots()\nax.boxplot(flat_price, labels=town)\n\nax.set_ylabel('Resale Value (in SGD)')\nax.set_title('Resale Value of 4-Room Flats from Jan 2017 to Jun 2020')\n\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Observations\n\nFrom the boxplot, we see that **4-room resale flats in Clementi tend to cost more and can have a huge variance in price**. If you're on a very tight budget, a resale flat in Woodlands may be the optimal choice. 4-room resales flats in Punggol and Tampines have similar prices, so **it would be helpful to zoom into Punggol & Tampines estates and compare the amenities available** to specific flats and sub-areas in each town, in order to make a more informed decision.","metadata":{}},{"cell_type":"markdown","source":"# Question 9: Construct a Heatmap of all 4 room resale listings in Singapore\n\n**Background:**\n\n- You have been tasked to visualise the density of 4-rooms HDB resale listings across different towns in Singapore.\n\n**User story:**\n\n- Extract a nested list of latitude and longitude data for each <code>4 ROOM</code> flat from <code>hdb_resale_listings</code>\n- Use the extracted data to plot a heatmap of all 4-room resale listings in Singapore\n- Map configuration: <code>location=[1.357,103.826]</code>, <code>height=350</code>, <code>width=800</code>, <code>zoom_start=11.4</code>\n- Heatmap configuration: radius of 8 and gradient <code>{0.2:'blue', 0.4:'purple', 0.6:'orange', 1.0:'red'}</code>","metadata":{}},{"cell_type":"code","source":"## Import the folium library and HeatMap folium plugin here\n\nimport folium\nfrom folium.plugins import HeatMap\n\n## Write your code below\n\nlat_and_long = []\n\nfor row in hdb_resale_listings:\n    if row[2] == '4 ROOM':\n        lat_and_long.append([row[-1],row[-2]])\n\nmap_folium = folium.Map([1.357,103.826], height=350, width=800, zoom_start=11.4)\n\nHeatMap(lat_and_long, radius=8, gradient={0.2:'blue',0.4:'purple',0.6:'orange',1.0:'red'}).add_to(map_folium) \n\ndisplay(map_folium)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Question 10: Construct a Folium Marker Cluster of all 4 room resale listings in Singapore\n\n**Background:**\n\n- You have been tasked to visualise the geographical distribution & resales prices of all 4-rooms HDB resale listings in Singapore.\n\n**User story:**\n\n- Extract a nested list of latitude and longitude data of each <code>4 ROOM</code> flat from <code>hdb_resale_listings</code>\n- Extract a list of resale prices for each <code>4 ROOM</code> flat from <code>hdb_resale_listings</code>\n- Use the extracted data to plot a **folium marker cluster** of all 4-room resale listings in Singapore\n- Map configuration: <code>location=[1.357,103.826]</code>, <code>height=550</code>, <code>width=900</code>, <code>zoom_start=11.5</code>\n- Each of your markers should show a tooltip that reads \"Click to view price\" when a user hover his/her mouse over it\n- When the user clicks on any marker, it should reveal the resale price of that particular flat","metadata":{}},{"cell_type":"code","source":"# Import the MarkerCluster folium plugin\nfrom folium.plugins import MarkerCluster\n\n## Write your code below (Note: the Folium map output might take a while to load)\n\nmap_folium = folium.Map(location=[1.357,103.826], height=550, width=900, zoom_start=11.5)\n\nmarker_cluster = MarkerCluster().add_to(map_folium)\n\nlat_and_long = []\nresale_price = []\n\nfor row in hdb_resale_listings:\n    if row[2] == '4 ROOM':\n        lat_and_long.append([row[-1],row[-2]])\n        resale_price.append(row[-4])\n\nfor i in range(len(lat_and_long)):\n    \n    lat_long_of_one_listing = lat_and_long[i]    \n    pop_display_price = '$' + str(resale_price[i]) \n    \n    folium.Marker(location=lat_long_of_one_listing, popup=pop_display_price).add_to(marker_cluster)\n\ndisplay(map_folium)","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}